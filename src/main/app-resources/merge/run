#!/opt/anaconda/envs/env_ewf_wfp_02_03_01/bin/python

import os
import sys
import subprocess

sys.path.append('/'.join([os.environ['_CIOP_APPLICATION_PATH'], 'util']))
sys.path.append('../util')

from s2_whittaker_helpers import analyse_merge_row

import string
import atexit
import pandas as pd
import cioppy 
import gdal
import shutil
from shapely.geometry import box
import datetime

import lxml.etree as etree
import numpy as np
from shapely.wkt import loads

ciop = cioppy.Cioppy()
    
# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_NO_OUTPUT = 30

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve Sentinel-2 product enclosure',
           ERR_STAGEIN: 'Could not stage-in Sentinel-2 product', 
           ERR_NO_OUTPUT: "Missing output"
    }
 
    ciop.log(log_level, msg[exit_code])  

  

def get_raster_wkt(raster):
    
    src = gdal.Open(raster)
    ulx, xres, xskew, uly, yskew, yres  = src.GetGeoTransform()
    lrx = ulx + (src.RasterXSize * xres)
    lry = uly + (src.RasterYSize * yres)

    from osgeo import ogr
    from osgeo import osr

    # Setup the source projection - you can also import from epsg, proj4...
    source = osr.SpatialReference()
    source.ImportFromWkt(src.GetProjection())

    # The target projection
    target = osr.SpatialReference()
    target.ImportFromEPSG(4326)

    # Create the transform - this can be used repeatedly
    transform = osr.CoordinateTransformation(source, target)

    return box(transform.TransformPoint(ulx, lry)[0], 
       transform.TransformPoint(ulx, lry)[1],
       transform.TransformPoint(lrx, uly)[0],
       transform.TransformPoint(lrx, uly)[1]).wkt


def create_metadata(metadata):

    namespaces = dict()

    namespaces['opt'] = 'http://www.opengis.net/opt/2.1'
    namespaces['om']  = 'http://www.opengis.net/om/2.0'
    namespaces['gml'] = 'http://www.opengis.net/gml/3.2'
    namespaces['eop'] = 'http://www.opengis.net/eop/2.1'
    namespaces['sar'] = 'http://www.opengis.net/sar/2.1'
    namespaces['ssp'] = 'http://www.opengis.net/ssp/2.1'
    
    
    for key, value in namespaces.items():
        etree.register_namespace(key, value)
   
    root = etree.Element('{{}}EarthObservation'.format(namespaces['ssp']))

    # Time
    phenomenon_time = etree.SubElement(root, '{{{}}}phenomenonTime'.format(namespaces['om']))
    time_period = etree.SubElement(phenomenon_time, '{{{}}}TimePeriod'.format(namespaces['gml']))
    begin_position = etree.SubElement(time_period, '{{{}}}beginPosition'.format(namespaces['gml']))
    end_position = etree.SubElement(time_period, '{{{}}}endPosition'.format(namespaces['gml']))
    
    feature_of_interest = etree.SubElement(root, '{{{}}}featureOfInterest'.format(namespaces['om']))
    footprint = etree.SubElement(feature_of_interest, '{{{}}}Footprint'.format(namespaces['ssp']))
    multi_extentOf = etree.SubElement(footprint, '{{{}}}multiExtentOf'.format(namespaces['ssp']))
    multi_surface = etree.SubElement(multi_extentOf, '{{{}}}MultiSurface'.format(namespaces['gml']))
    surface_members = etree.SubElement(multi_surface, '{{{}}}surfaceMembers'.format(namespaces['gml']))
    polygon = etree.SubElement(surface_members, '{{{}}}Polygon'.format(namespaces['gml']))
    exterior = etree.SubElement(polygon, '{{{}}}exterior'.format(namespaces['gml']))
    linear_ring = etree.SubElement(exterior, '{{{}}}LinearRing'.format(namespaces['gml']))
    poslist = etree.SubElement(linear_ring, '{{{}}}posList'.format(namespaces['gml']))

    # Metadata property
    metadata_property = etree.SubElement(root, '{{{}}}metaDataProperty'.format(namespaces['eop']))
    earth_observation_metadata = etree.SubElement(metadata_property, '{{{}}}EarthObservationMetaData'.format(namespaces['eop']))
    identifier = etree.SubElement(earth_observation_metadata, '{{{}}}identifier'.format(namespaces['eop']))
    product_type = etree.SubElement(earth_observation_metadata, '{{{}}}productType'.format(namespaces['eop']))
    vendorSpecific = etree.SubElement(earth_observation_metadata, '{{{}}}vendorSpecific'.format(namespaces['eop']))
    SpecificInformation = etree.SubElement(vendorSpecific, '{{{}}}SpecificInformation'.format(namespaces['eop']))
    localAttribute = etree.SubElement(SpecificInformation, '{{{}}}localAttribute'.format(namespaces['eop']))
    localValue = etree.SubElement(SpecificInformation, '{{{}}}localValue'.format(namespaces['eop']))
    specialValueText = etree.SubElement(SpecificInformation, '{{{}}}specialValueText'.format(namespaces['eop']))
    specialValueIndex = etree.SubElement(SpecificInformation, '{{{}}}specialValueIndex'.format(namespaces['eop']))
    
    if 'startdate' in metadata.keys():
        begin_position.text = metadata['startdate']
    if 'enddate' in metadata.keys():    
        end_position.text = metadata['enddate']
   
    coords = np.asarray([t[::-1] for t in list(loads(metadata['wkt']).exterior.coords)]).tolist()
 
    pos_list = ''
    for elem in coords:
        pos_list += ' '.join(str(e) for e in elem) + ' '   

    poslist.attrib['count'] = str(len(coords))
    poslist.text = pos_list
    
    
    identifier.text = metadata['identifier'] 
    product_type.text = metadata['product_type'] 
    localAttribute.text = 'Band'
    localValue.text = metadata['vendor_attrib_value']
    
    specialValueText.text = 'NODATA'
    specialValueIndex.text = metadata['no_data']
    return etree.tostring(root, pretty_print=True)

def main():
     
    ciop = cioppy.Cioppy()

    band_to_process_orig = ciop.getparam('band')

    os.chdir(ciop.tmp_dir)
    
    references = []
                
    for input in sys.stdin:
        ciop.log('INFO', 'Adding {}'.format(input.rstrip()))       
        references.append(input.rstrip())

    df_references = pd.DataFrame(references)
    df_references.columns = ['enclosure']
    
    df_references = df_references.merge(df_references.apply(lambda row: analyse_merge_row(row, band_to_process_orig), axis=1), 
              left_index=True,
              right_index=True)
    
    results = {}
    tile = df_references.tile.unique()[0]
    
    for output_type in df_references.output_type.unique():
        
        print(output_type)
        local_paths = []
        original_paths = []
        band_to_process = band_to_process_orig

        for entry, row in df_references[df_references.output_type == output_type].iterrows():

            print (row.enclosure)
            
            local_paths.append(ciop.copy(row.enclosure, '.'))
            original_paths.append(row.enclosure)

        local_vrt = '{}_temp_vrt.xml'.format(output_type)

        ds = gdal.BuildVRT(local_vrt, local_paths)

        ds.FlushCache()
        gdal.UseExceptions()
        src_ds = gdal.Open(local_paths[0])
        if not src_ds:
            ciop.log('DEBUG', 'The local path to {} is void.'.format(local_paths[0]))
            
        
        # save individual bands
        ciop.log('DEBUG', 'number of bands {}'.format(src_ds.RasterCount))
        
        for index in range(src_ds.RasterCount):

            desc = src_ds.GetRasterBand(index+1).GetDescription()
            meta = src_ds.GetRasterBand(index+1).GetMetadata()
            ciop.log('INFO', 'Saving {} band on {}'.format(output_type,desc))
            ciop.log('DEBUG', 'metadata {}'.format(meta))
            
            if meta == '':
                
                ciop.copy(original_paths[0], '{}/tmp/{}.hdfs.tif'.format(os.environ['nameNode'].os.path.basename(original_paths[0])))
                ciop.copy(local_paths[0],'{}/tmp/'.format(os.environ['nameNode']))
                          
                for cmd in ['hadoop -dfs -cp {} {}/tmp/{}.hdfs'.format(original_paths[0],os.environ['nameNode'],os.path.basename(original_paths[0])),
                            'hadoop -dfs -cp {} {}/tmp/{}'.format(local_paths[0],os.environ['nameNode'],os.path.basename(local_paths[0])),
                            'hadoop -dfs -ls {}'.format(original_paths[0]), 
                            'ls -la {}'.format(local_paths[0])]:
                    p = subprocess.Popen(cmd,
                                         stdout=subprocess.PIPE,
                                         stdin=subprocess.PIPE,
                                         stderr=subprocess.PIPE,
                                         universal_newlines=True)

                    res, err = p.communicate()

                    if p.returncode:
                        raise Exception('subprocess returned: ' + str(p.returncode) + '\n' + err )
                        
                    my_output = res.rstrip('\n').split('\n')
                    ciop.log('DEBUG', '{}: \n{}'.format(cmd,my_output))

                
                
            
            if desc == 's' or desc == 'lag1':
                #s or lag1
                output_name = 'S2_{}_{}_{}'.format(output_type, tile, meta['full_period'])
                translated_tif = '{}.tif'.format(output_name)
                
            elif 'SCL' in desc:
                output_name = 'S2_{}_{}_{}_{}'.format(output_type, 
                                                tile,
                                                meta['date'],
                                                meta['full_period'])
                translated_tif = '{}.tif'.format(output_name)
                
            else:
                if 'band_is_interpolated' in meta.keys():
                    # interpolated
                    output_name = 'S2_{}_{}_{}_{}_{}'.format(band_to_process,
                                                             'SYN' if meta['band_is_interpolated'] == 'True' else 'NAT',
                                                             tile,
                                                             meta['date'],
                                                             meta['full_period'])

                    translated_tif = '{}.tif'.format(output_name)
                else:
                    # original
                    output_name = 'S2_{}_{}_{}_{}_{}'.format(band_to_process,
                                                             'ORI',
                                                             tile,
                                                             meta['date'],
                                                             meta['full_period'])

                    translated_tif = '{}.tif'.format(output_name)

            gdal.Translate(translated_tif,
                           local_vrt, 
                           bandList=[index+1])

            ds = gdal.Open(translated_tif,  gdal.OF_UPDATE)
            ds.GetRasterBand(1).SetDescription(desc)
            ds.GetRasterBand(1).SetMetadata(meta)
            ds.FlushCache()
           
            if desc == 's' or desc == 'lag1':

                prd_type = desc[:3] if len(desc)>1 else desc
                
                title = 'Sentinel-2 tile {} {} {} factor'.format(tile, band_to_process, prd_type)
                
                metadata = dict()

                metadata['identifier'] = output_name
               # metadata['startdate'] = datetime.datetime.strptime(desc, '%Y%j').date().strftime('%Y-%m-%dT00:00:00Z')
               # metadata['enddate'] = datetime.datetime.strptime(desc, '%Y%j').date().strftime('%Y-%m-%dT23:59:59Z')
                metadata['product_type'] = 'S2_{}'.format(prd_type)
                metadata['wkt'] = get_raster_wkt(translated_tif) 
                metadata['vendor_attrib_value'] = band_to_process_orig
                metadata['no_data'] = '0'   #noData for Sgrid and lag1
                eop_xml = '{}.xml'.format(output_name)
                with open(eop_xml, 'wb') as file:
                    file.write(bytes('<?xml version="1.0" encoding="UTF-8"?>\n',encoding = 'utf-8'))
                    file.write(create_metadata(metadata))

                with open('{}.properties'.format(output_name), 'wb') as file:
                    file.write(bytes('title={}\n'.format(title),encoding = 'utf-8'))
                    
            else:
                
                if 'SCL' in desc:
                    prd_type = 'SCL mask'
                    band_to_process = 'mask'
                    print (desc.split('SCL mask on ')[1])
                    band_datetime = datetime.datetime.strptime(desc.split('SCL mask on ')[1], '%Y%j').date()
                else:
                    prd_type = 'original' if not 'band_is_interpolated' in meta.keys() else 'synthetic' if meta['band_is_interpolated'] == 'True' else 'native'
                    band_datetime = datetime.datetime.strptime(desc, '%Y%j').date()
                
                title = 'Sentinel-2 tile {} {} {} Julian day {}, date {}, full period {}'.format(tile,
                                                                                 band_to_process,
                                                                                 prd_type,
                                                                                 meta['jdate'], 
                                                                                 band_datetime.strftime('%Y-%m-%d'),
                                                                                 meta['full_period'])

                metadata = dict()

                metadata['identifier'] = output_name
                metadata['startdate'] = band_datetime.strftime('%Y-%m-%dT00:00:00Z')
                metadata['enddate'] = band_datetime.strftime('%Y-%m-%dT23:59:59Z')
                metadata['product_type'] = 'S2_{}_{}'.format(band_to_process, 'ORI' if not 'band_is_interpolated' in meta.keys() else 'SYN' if meta['band_is_interpolated'] == 'True' else 'NAT')
                metadata['wkt'] = get_raster_wkt(translated_tif)
                metadata['vendor_attrib_value'] = band_to_process_orig
                if band_to_process_orig == 'NDVI':
                    metadata['no_data'] = '-3000'  #noData NDVI
                if band_to_process_orig in 'NDWI MNDWI NDBI':
                    metadata['no_data'] = '-10000'  #noData NDWI MNDWI NDBI
                else: 
                    metadata['no_data'] = '0'      #noData for other bands
                    
                    
                if 'SCL' in desc:
                    metadata['product_type'] = 'S2_{}'.format('_'.join(prd_type.split(' ')))
                    
                eop_xml = '{}.xml'.format(output_name)
                
                with open(eop_xml, 'wb') as file:
                    file.write(bytes('<?xml version="1.0" encoding="UTF-8"?>\n',encoding = 'utf-8'))
                    file.write(create_metadata(metadata))

                with open('{}.properties'.format(output_name), 'wb') as file:
                    file.write(bytes('title={}\n'.format(title),encoding = 'utf-8'))

            for extension in ['tif', 'properties', 'xml']:
                
                ciop.log('INFO', 'Publish {}.{}'.format(output_name, extension))
                ciop.publish(os.path.join(ciop.tmp_dir, '{}.{}'.format(output_name, extension)), metalink=True)
                

        for file in (local_paths + [local_vrt]):

            os.remove(file)
try:
    main()
except SystemExit as e:
    if e.args[0]:
        clean_exit(e.args[0])
    raise
else:
    atexit.register(clean_exit, 0)
