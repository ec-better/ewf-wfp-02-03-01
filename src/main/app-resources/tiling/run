#!/opt/anaconda/envs/env_ewf_wfp_02_03_01/bin/python

import os
import sys

sys.path.append('/'.join([os.environ['_CIOP_APPLICATION_PATH'], 'util']))
sys.path.append('../util')

import string
import atexit
import pandas as pd
import cioppy 

from s2_whittaker_helpers import *

ciop = cioppy.Cioppy()
    
# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_NO_OUTPUT = 30

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve Sentinel-2 product enclosure',
           ERR_STAGEIN: 'Could not stage-in Sentinel-2 product', 
           ERR_NO_OUTPUT: "Missing output"
    }
 
    ciop.log(log_level, msg[exit_code])  

def main():
     
    ciop = cioppy.Cioppy()
    
    data_pipeline_parameters = dict()    
    
    data_pipeline_parameters['username'] = ciop.getparam('_T2Username')
    data_pipeline_parameters['api_key'] = ciop.getparam('_T2ApiKey')
    data_pipeline_parameters['end_point'] = ciop.getparam('input_end_point')
    
    #### Search Params
    cc = '[0,{}]'.format(ciop.getparam('CC_threshold')) 
    search_params = dict()
    
    search_params['start'] = ciop.getparam('start_date')
    search_params['stop'] = ciop.getparam('end_date')
    search_params['q'] = ciop.getparam('tile_id')
    
    search_params['cat'] =  '!dataitem'
    search_params['count'] = 500
    
    search_params['cc'] = cc
    
    
    creds = '{}:{}'.format(data_pipeline_parameters['username'],
                           data_pipeline_parameters['api_key'])

    search_input = pd.DataFrame(ciop.search(end_point=data_pipeline_parameters['end_point'],
                                      params=search_params,
                                      output_fields='self,startdate',
                                      timeout='1200000',
                                      model='GeoTime',
                                      creds=creds))
    search_input.columns=['self','startdate']
    
    ref_dataframe = search_input.drop_duplicates(subset=['startdate'], keep="first", inplace=False)
    references = ref_dataframe['self'].tolist()
    
    
    

    os.chdir(ciop.tmp_dir)
 
#    references = []               
#    for input in sys.stdin:
#        ciop.log('INFO', 'Adding {}'.format(input.rstrip()))       
#        references.append(input.rstrip())

    data_pipeline_results = pd.DataFrame()

    fields = 'title,identifier,self,enclosure,cat,cc,wkt,updated,startdate'
    search_result_params = []
    
    for index, end_point in enumerate(references):
        ciop.log('INFO', 'Getting metadata for {}'.format(end_point))      
        temp_df = pd.DataFrame.from_dict(ciop.search(end_point=end_point,
                                                     params=search_result_params,
                                                     output_fields=fields, 
                                                     model='EOP',
                                                     timeout='600000',
                                                     creds=creds))

        data_pipeline_results = data_pipeline_results.append(temp_df, ignore_index=True)
        
    data_pipeline_results = data_pipeline_results.merge(data_pipeline_results.apply(lambda row: analyse_row(row), axis=1),
                                                        left_index=True,
                                                        right_index=True)
    
    src_ds = gdal.Open(get_vsi_url(data_pipeline_results.iloc[0]['enclosure'], 
                                   data_pipeline_parameters['username'], 
                                   data_pipeline_parameters['api_key']))

    if src_ds is None:
        raise(ValueError)

    bands = dict()

    for index in range(src_ds.RasterCount):

        index += 1

        print(index, src_ds.GetRasterBand(index).GetDescription())
        bands[src_ds.GetRasterBand(index).GetDescription()] = index 

    tiling_factor = 10
    
    sub_tiles = get_sub_tiles(data_pipeline_results, data_pipeline_parameters, tiling_factor)
    ciop.log('INFO', 'Number of subtiles: {}'.format(len(sub_tiles)))
    
    for index, sub_tile in enumerate(sub_tiles.sub_tile.unique()):
        
        print(index,sub_tile)
    
        sub_tiles[sub_tiles['sub_tile'] == sub_tile].sort_values(by=['day']).reset_index().to_pickle(os.path.join(ciop.tmp_dir,
                                                                                                                  '{}.pickle'.format(sub_tile)), 'gzip')
        #Testing condition to reduce tiles
        #if index >= 1: continue
        
        ciop.log('INFO', 'Publish {}.pickle'.format(sub_tile))
        ciop.publish(os.path.join(ciop.tmp_dir, '{}.pickle'.format(sub_tile)))

try:
    main()
except SystemExit as e:
    if e.args[0]:
        clean_exit(e.args[0])
    raise
else:
    atexit.register(clean_exit, 0)
